{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf340
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Verdana;}
{\colortbl;\red255\green255\blue255;\red28\green28\blue28;\red26\green26\blue26;}
\paperw11900\paperh16840\margl1440\margr1440\vieww14460\viewh26300\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \
\
\
\
\
Floyd tech V1\
=================\
1) User functions in Javascript\
2) Chip designs with transformers + optimizers\
3) Simulation designs + transformers + optimizers\
\
\
- Program is run interactively\
\
Web-based editor\
	Unit tests/ examples / contracts / coverage\
	API towards Floyd runtime\
	User programs written Javascript code.\
	Interactive, diagram i/o.\
\
Simulation page\
\
Chip designer page\
\
Internals\
- Web editors etc are Javascript. These are remote, live tools.\
- User programs stored on ***GitHub***. (### Parse.com?)\
- Programs are always run natively. During development on Amazon EC2, during testing / deployment on local hardware. Linked to Github.\
\
- Uses LLVM to target different native platforms.\
\
- Always run simulation AND runtime natively. Either on EC2 or local machine. All interactive IDE is done in Javascript and remotely.\
\
\
\
\
Class purpose:\
=================\
Interface\
Bundle values\
Keep data invariant\
Represent external gadget\
Layer APIs\
Represent start / end = lifetime\
\
\
\
Subtext-lang.org\
	Notation matters\
https://vimeo.com/140738254\
\
\
\
VISUAL INTERACTIVE - VICTOR BRET\
	WORKBENCH WEB\
\
\pard\pardeftab720\partightenfactor0

\fs28 \cf2 \expnd0\expndtw0\kerning0
Use excel-style grid with input / outputs. Store in text file as ascii-art / markdown.\
Debug probes\
\
http://en.wikipedia.org/wiki/DRAKON
\f1 \cf3 \
\
### Quartz Compositor\
https://en.wikipedia.org/wiki/Quartz_Composer\
\
\
GOAL:\
- Have most features needed by most programs BUILT into the language.\
- NON goal: allow libraries to do everything language can. Language is an explicit layer below libraries and application.\
- SINGLE paradigmed\
- No null\
- No macros\
- Cache-line type\
\
??? refs / byvalue, interning, immutability, equality, diffing\
\
Each source file is a Git repo with a GUID + version hash. Source file is webpage with labview, inputs, outputs, source, dependencies and visualizations. Performance and test coverage.\
All dependencies from a piece of code are defined, including compiler etc.\
\
\
\
\
http://www.drdobbs.com/architecture-and-design/so-you-want-to-write-your-own-language/240165488\
\
\
x10 language\
\
\
\
\
What would, perhaps, be more interesting is to focus on the 
\i accidental
\i0  side-effects. I don't think anyone disagrees that some amount of well controlled side-effects are definitely manageable, especially if that side-effect doesn't affect the subsequent state of the program (this is also why globals are so shunned nowadays, apart from aspects like dependency injection, since side effects become harder to manage). For example, logging and caching would be side-effects that ideally don't affect the "main" result of the program at all. The problem with this idea is that the compiler can't universally decide whether a side-effect affects the main result, I think, so the compiler would need to rely on the programmer to supply that information \'96 and we all know how bad that is. (You can also argue that logging, while not changing the "main result" of the program, does write to and change files on the disk, so it's not even a "safe" operation.) And of course multi threaded programs are a huge factor to consider as well, since a strictly pure function can be easily parallelised, while the definition of safety presented in this paragraph is far too loose to reason about the thread-safety of a function.\
}