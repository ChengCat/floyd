

# STRUCTS

Define a new struct called "my_struct". All members are named and have default values.
my_struct1 { float a = 0; }

Define a new anonumous struct and assign its state
{ float a = 0; string b = "xyz" }
{ float a = 0; string b = "xyz" }(a = 11, b = "hello")

Constructor.
my_struct2 {
	float a = 0;
	_(int color){
		a = color;
	}
}

//	Getter, setter, private and invariant()
my_struct3 {
	float a(){
		return internal_a;
	}
	a(float v){
		prev = internal_a;
		internal_a = v;
	}

	private internal_a = 0;
	private prev = 0;

	invariant(my_struct3 this){
		verify(internal_a > = 0); 
		verify(prev > = 0); 
	}
}


//### Mutating functions have different syntax and always operate on a mutable copy of the original!!

//	Mutating function
my_struct3 {
	float a = 0;

	my_struct3 Double(my_struct3 this){
		mut temp = this.copy()
		temp.a = temp.a * 2.0f;
		return temp;
	}
	my_struct3 Double(my_struct3 mutable_copy){
		mutable_copy.a = mutable_copy.a * 2.0f;
		return mutable_copy;
	}

	invariant(my_struct3 this){
		verify(internal_a > = 0); 
		verify(prev > = 0); 
	}
}




# TUPLES
my_typle ( float, int )
(float, int)

example
	a = (float, int)(13.5f, 10);


# VECTORS

Define a vector of strings
[string]

example
	a = [string];	//	Empty vector
	b = [string]( "one", "two", "three");		//	Vector initialized to 3 strings.


# MAP / LOOKUP

{string, float}

a = {string, int}(("one", 1), ("two", 2), ("three", 3))	//	Make map where key is a string and value is an int. Initialize it. Each initializer-entry is an annonymous tuple with correct type.

	###	var airports: [String: String] = ["YYZ": "Toronto Pearson", "DUB": "Dublin"]
	### var airports = ["YYZ": "Toronto Pearson", "DUB": "Dublin"]



# FUNCTIONS

float my_function1(int a, string b){
	return 3.1415f;
}

(float, int) my_function2 (int )





TEST PROGRAM
=================================================

test_struct1 {
	float a = 0;
	string b = "blank";
}

prove(test_struct1){
	test_struct1 x;
	assert(x.a == 0);
	assert(x.b == "blank");
}

test_struct1 {
	float a = 0;
	string b = "blank";
}

prove(test_struct1){
	test_struct1 x;
	assert(x.a == 0);
	assert(x.b == "blank");
}