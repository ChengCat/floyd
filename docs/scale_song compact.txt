desc "Delete the track from the song, as specified by track index"

func scale_song {
	result {
		type song
		desc "The new song, where the track track_index has been removed."
		contract: original.count_tracks() == result.count_tracks() - 1
	},
	probe_results [
		type song,
		desc "The new song, where the track track_index has been removed."
		contract: original.count_tracks() == result.count_tracks() - 1
	],
	inputs [
		{
			song original
			desc "The original song. The track must exists."
			contract original.count_tracks() > 0
		},
		{
			int track_index
			desc "The track to delete, specified as a track index inside the original song."
			contract track_index >= 0 && track_index < original.count_tracks()
		},
		{
			int probe_log_level
			desc "debug probe"
		}
	],


	int temp = 3


	probes [
		{
			"line": 3
			"type": "collection-access-probe"
		}
	],

	proofs [
		{
			"Delete only track in song" => "empty song"
			(song1track, 0) => empty0
		},
		{
			"Delete one of 2 tracks" => "1-track song"
			(song2track, 0) => song1track
		}
	],
	demos [
		{
			"scenario": "Scale different tracks"

			count = slider(0, 20), "Number of tracks"
			track_index = slider(0, 20), "Track to scale"

			test_song = make_test_song(count)
			test_song = scale_song(test_song, track_index)
			(test_song, track_index) => _
		}
	]
}
